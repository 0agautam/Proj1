								String

1. Creating a string
irb(main):089:0> s= String.new("hello world!!",encoding:'UTF-8',capacity:10)
=> "hello world!!"

2. Format Strings
irb(main):095:0> "%0f"% 1234
=> "1234.000000"
irb(main):096:0> "%0s"% 1234
=> "1234"
irb(main):097:0> "%0c"% 1234
=> "Ӓ"
irb(main):098:0> "%0c"% 97
=> "a"
irb(main):099:0> "%0x"% 97
=> "61"
irb(main):100:0> "%0"% 97
Traceback (most recent call last):
        5: from /usr/bin/irb:23:in `<main>'
        4: from /usr/bin/irb:23:in `load'
        3: from /usr/lib/ruby/gems/2.7.0/gems/irb-1.2.6/exe/irb:11:in `<top (required)>'
        2: from (irb):100
        1: from (irb):100:in `%'
ArgumentError (invalid format character - %)
irb(main):101:0> "%0o"% 97
=> "141"
irb(main):102:0> "%o"% 97
=> "141"
irb(main):103:0> "%b"% 97
=> "1100001"
irb(main):104:0> 

string % object
irb(main):115:0> "%-5s : %016x" % ["ID", self.object_id]
=> "ID    : 0000000000003444"
irb(main):116:0> "foo = %{foo}" % {foo: 'bar'}
=> "foo = bar"
irb(main):117:0> "foo = %{foo}, baz = %{baz}" % {foo: 'bar',baz:'bat'}
=> "foo = bar, baz = bat"

string * integer
irb(main):120:0> "Ruby!!!" * 3
=> "Ruby!!!Ruby!!!Ruby!!!"
irb(main):121:0> "Ruby!!!" * 0
=> ""

irb(main):127:0> "Hello Ruby " + self.to_s
=> "Hello Ruby main"

3. Regex with strings

irb(main):195:0> 'hello there'[/[aeiou](.)\l/,0]
=> "ell"
irb(main):196:0> 'hello there'[/[aeiou](.)\l/,1]
=> "l"
irb(main):197:0> 'hello there'[/[aeiou](.)\l/,2]
=> nil
irb(main):198:0> 'hello there'[/[aeiou](.)\l/,0]
=> "ell"

irb(main):203:0> 'hello there'[/(?<vowel>[aeiou])(?<non_vowel>[^aeiou])/,"non_vowel"]
=> "l"
irb(main):204:0> 'hello there'[/(?<vowel>[aeiou])(?<non_vowel>[^aeiou])/,:vowel]
=> "e"
irb(main):205:0> 'hello there'[/(?<vowel>[aeiou](.))(?<non_vowel>[^aeiou])/,:vowel]
=> "el"
irb(main):206:0> 'hello there'[/(?<vowel>[aeiou](..))(?<non_vowel>[^aeiou])/,:vowel]
=> "o t"

Slice
irb(main):210:0> 'hello there'.slice(0)
=> "h"
irb(main):211:0> 'hello there'.slice(0,3)
=> "hel"
irb(main):212:0> 'hello there'.slice(0..3)
=> "hell"

4. Bytes,b,bytesize,byteslice

irb(main):313:0> s= "\x80\u3042"
=> "\x80あ"
irb(main):314:0> s.slice(1)
=> "あ"
irb(main):315:0> s.size
=> 2
irb(main):316:0> s.bytesize
=> 4

irb(main):348:0> s.byteslice(1..1)
=> "\xE3"
irb(main):349:0> s
=> "\x80\xE3\x81\x82"
irb(main):350:0> str
=> "\x80あ"
irb(main):351:0> str.byteslice(1..1)
=> "\xE3"
irb(main):352:0> str.byteslice(1..2)
=> "\xE3\x81"

Capatalize
irb(main):363:0> s = "abcd234Anb"
=> "abcd234Anb"
irb(main):364:0> s.capitalize
=> "Abcd234anb"
irb(main):365:0> s
=> "abcd234Anb"
irb(main):366:0> s.capitalize!
=> "Abcd234anb"
irb(main):367:0> s
=> "Abcd234anb"
irb(main):368:0> s.downcase
=> "abcd234anb"
irb(main):369:0> s
=> "Abcd234anb"
irb(main):370:0> s.downcase!
=> "abcd234anb"

casecmp with ignorinig case 
irb(main):373:0> 'foo'.casecmp('Foo')
=> 0
irb(main):374:0> 'foo'.casecmp('Food')
=> -1
irb(main):375:0> 'foode'.casecmp('Food')
=> 1
irb(main):376:0> 'fooe'.casecmp('Food')
=> 1
irb(main):377:0> 'fooa'.casecmp('Food')
=> -1

irb(main):378:0> 'fooa'.casecmp?('Food')
=> false
irb(main):379:0> 'food'.casecmp?('Food')
=> true

center a string 
irb(main):393:0> s= 'good'.center(9,">")
=> ">>good>>>"

irb(main):384:0> s= 'good'.center(8)
=> "  good  "
irb(main):385:0> s
=> "  good  "
irb(main):386:0> s.length
=> 8
irb(main):387:0> s= 'good'.center(4)
=> "good"
irb(main):388:0> s.length
=> 4

chars to convert str to array
irb(main):396:0> s
=> ">>good>>>"
irb(main):397:0> sary = s.chars
=> [">", ">", "g", "o", "o", "d", ">", ">", ">"]
irb(main):399:0> sary.count
=> 9
irb(main):400:0> s.each_char.to_a
=> [">", ">", "g", "o", "o", "d", ">", ">", ">"]

chomp removes /r,/n and /r/n or given record seperator if present from the end of string

irb(main):440:0> s= "hello\r\r\n".chomp
=> "hello\r"
irb(main):441:0> s= "hello\r\n".chomp
=> "hello"
irb(main):442:0> s= "hello\r\n\rn".chomp
=> "hello\r\n\rn"
irb(main):443:0> s= "hello\r\n\r".chomp
=> "hello\r\n"

chop 
irb(main):484:0> s= "hello x abcd".chop
=> "hello x abc"
irb(main):485:0> s= "hello x abcd".chop.chop.chop
=> "hello x a"
irb(main):486:0> s= "hello x abcd\n\r".chop.chop.chop
=> "hello x abc"
irb(main):487:0> s= "hello x abcd\n\r\n".chop.chop.chop
=> "hello x abc"
irb(main):488:0> s= "hello x abcd\n\r\n\r\n\n\r".chop.chop.chop
=> "hello x abcd\n\r\n"

irb(main):491:0> s = "ab3.kd993,9.2.ab1"
=> "ab3.kd993,9.2.ab1"
irb(main):492:0> s.codepoints
=> [97, 98, 51, 46, 107, 100, 57, 57, 51, 44, 57, 46, 50, 46, 97, 98, 49]
irb(main):493:0> s.each_codepoint.to_a
=> [97, 98, 51, 46, 107, 100, 57, 57, 51, 44, 57, 46, 50, 46, 97, 98, 49]

count function return integer according to set of characters found
irb(main):534:0> s = "hello^worl*d"
=> "hello^worl*d"
irb(main):535:0> s.count "*"
=> 1
irb(main):536:0> s.count "\*"
=> 1
irb(main):537:0> s.count "^*"
=> 11
irb(main):538:0> s.count "\^*"
=> 11
irb(main):539:0> s.count "\\^*"
=> 2

crypt
irb(main):554:0> 'foo'.crypt("$1$rounds=1000$salt$")
=> "$1$rounds=1$xJbi25cV0f9/pxUx9OIzI0"
irb(main):555:0> 'foo'.crypt("$2$rounds=1000$salt$")
=> "*0"
irb(main):556:0> 'foo'.crypt("$3$rounds=1000$salt$")
=> "$3$$ac8e657f83df82beea5d43bdaf7800cc"
irb(main):557:0> 'foo'.crypt("$5$rounds=1000$salt$")
=> "$5$rounds=1000$salt$sOwBWdzaQ/gPXFtLc24VstV7ZQk3/x7k0cDfKUxXsn8"
irb(main):558:0> s='foo'.crypt("$5$rounds=1000$salt$")
=> "$5$rounds=1000$salt$sOwBWdzaQ/gPXFtLc24VstV7ZQk3/x7k0cDfKUxXsn8"
irb(main):559:0> s
=> "$5$rounds=1000$salt$sOwBWdzaQ/gPXFtLc24VstV7ZQk3/x7k0cDfKUxXsn8"
irb(main):560:0> j='foo'.crypt("$5$rounds=1000$salt$")
=> "$5$rounds=1000$salt$sOwBWdzaQ/gPXFtLc24VstV7ZQk3/x7k0cDfKUxXsn8"
irb(main):561:0> s ==j
=> true
irb(main):562:0> s ==s
=> true
irb(main):563:0> s == a
=> false
irb(main):564:0> j='foo'.crypt("$3$rounds=1000$salt$")
=> "$3$$ac8e657f83df82beea5d43bdaf7800cc"
irb(main):565:0> s ==j
=> false
irb(main):566:0> j='foo'.crypt("$5$rounds=1000$salt$")
=> "$5$rounds=1000$salt$sOwBWdzaQ/gPXFtLc24VstV7ZQk3/x7k0cDfKUxXsn8"
irb(main):567:0> s ==j
=> true

delete uses the same set of rules as of count gives a new string
irb(main):571:0> s.delete "lo", "^l"
=> "hell wrl*d"
irb(main):572:0> s ="hello wo-rl*d"
=> "hello wo-rl*d"
irb(main):573:0> s.delete "^-"
=> "-"
irb(main):574:0> s.delete "^\-"
=> "-"
irb(main):575:0> s.delete "^\\-"
=> "-"
irb(main):576:0> s
=> "hello wo-rl*d"
irb(main):577:0> s.delete "^*"
=> "*"
irb(main):578:0> s.delete "^-*"
=> "-*"
irb(main):581:0> s.delete "^hello\\-*"
=> "helloo-l*"

irb(main):585:0> s.delete_prefix "he"
=> "llo wo-rl*d"
irb(main):586:0> s.delete_prefix "l"
=> "hello wo-rl*d"
irb(main):587:0> s.delete_prefix "hell"
=> "o wo-rl*d"
irb(main):588:0> s.delete_suffix "*"
=> "hello wo-rl*d"
irb(main):589:0> s.delete_suffix "*d"
=> "hello wo-rl"

dump replacing non printable chara with \ and escaping special character
irb(main):590:0> "hello \n ''".dump
=> "\"hello \\n ''\""
irb(main):591:0> "\f\x00\xff\\\"".dump
=> "\"\\f\\x00\\xFF\\\\\\\"\""
irb(main):592:0> "\f\x00\xff\"".dump
=> "\"\\f\\x00\\xFF\\\"\""

each_line
irb(main):640:0> "hello \n world".each_line() {|line| p line}
"hello \n"
" world"
=> "hello \n world"
irb(main):641:0> "hello \n world".each_line($/) {|line| p line}
"hello \n"
" world"
=> "hello \n world"
irb(main):642:0> "hello $/ world".each_line($/) {|line| p line}
"hello $/ world"
=> "hello $/ world"
irb(main):643:0> "hello \n wo\nrld".each_line($/) {|line| p line}
"hello \n"
" wo\n"
"rld"
=> "hello \n wo\nrld"
irb(main):644:0> "hello \n wo\nrld".each_line("l") {|line| p line}
"hel"
"l"
"o \n wo\nrl"
"d"
=> "hello \n wo\nrld"
irb(main):645:0> "hello \n wo\nrld".each_line("") {|line| p line}
"hello \n wo\nrld"
=> "hello \n wo\nrld"
irb(main):646:0> "hello \n wo\nrld".each_line($/,chomp: true) {|line| p line}
"hello "
" wo"
"rld"
=> "hello \n wo\nrld"

gsub
irb(main):732:0> str.gsub(/([aeiou])/,"\1")
=> "h\u0001ll\u0001-w\u0001r3l*d"
irb(main):733:0> str.gsub(/(?<foo>[aeiou])/,'{\k<foo>}')
=> "h{e}ll{o}-w{o}r3l*d"
irb(main):734:0> str.gsub(/([eo])/,'e'=>3,'o'=>*)
irb(main):735:0> str.gsub(/([eo])/,'e'=>3,'o'=>'*')
=> "h3ll*-w*r3l*d"

intern
irb(main):736:0> "koala".intern
=> :koala
irb(main):737:0> s = 'cat'.to_sym
=> :cat
irb(main):738:0> s.class
=> Symbol
irb(main):739:0> s == :cat
=> true
irb(main):740:0> s = '@cat'.to_sym
=> :@cat
irb(main):741:0> 'cat and dog'.to_sym
=> :"cat and dog"

ljust for left justifying the string
irb(main):744:0> "helloworld".ljust(5)
=> "helloworld"
irb(main):745:0> "helloworld".ljust(20," ")
=> "helloworld          "
irb(main):746:0> "helloworld".ljust(20,"")
Traceback (most recent call last):
        5: from /usr/bin/irb:23:in `<main>'
        4: from /usr/bin/irb:23:in `load'
        3: from /usr/lib/ruby/gems/2.7.0/gems/irb-1.2.6/exe/irb:11:in `<top (required)>'
        2: from (irb):746
        1: from (irb):746:in `ljust'
ArgumentError (zero width padding)
irb(main):747:0> "helloworld".ljust(20,"<>")
=> "helloworld<><><><><>"

strip
irb(main):749:0> "   h   elloworld     ".lstrip
=> "h   elloworld     "
irb(main):750:0> "   h   elloworld     ".rstrip
=> "   h   elloworld"
irb(main):751:0> "   h   elloworld     ".strip
=> "h   elloworld"

match for a pattern
irb(main):752:0> 'foo'.match('o')
=> #<MatchData "o">
irb(main):753:0> 'foo'.match('f',1)
=> nil
irb(main):754:0> 'Hello world'.match(/([aeiou])/) {|data| data}
=> #<MatchData "e" 1:"e">
irb(main):755:0> 'Hello world'.match(/([aeiou])/) {|matchdata| matchdata}
=> #<MatchData "e" 1:"e">
irb(main):756:0> 'Hello world'.match(/[aeiou]/) {|matchdata| matchdata}
=> #<MatchData "e">
irb(main):757:0> 'Hello world'.match(/([aeiou])/) {|matchdata| matchdata}
=> #<MatchData "e" 1:"e">

succ
irb(main):758:0> ''.succ
=> ""
irb(main):759:0> 'zz'.succ
=> "aaa"

partition
irb(main):760:0> str
=> "hello-wor3l*d"
irb(main):761:0> str.partition(/([aeiou])/)
=> ["h", "e", "llo-wor3l*d"]
irb(main):762:0> str.partition("-")
=> ["hello", "-", "wor3l*d"]

reverse
irb(main):763:0> a = "1234"
=> "1234"
irb(main):764:0> a = a.reverse
=> "4321"
irb(main):765:0> a
=> "4321"
irb(main):766:0> a= a.to_i
=> 4321
irb(main):767:0> a.class
=> Integer

scan return an array of matched string/ pattern

irb(main):771:0> a = "welcome to the constructive world of ruby"
=> "welcome to the constructive world of ruby"
irb(main):772:0> a.scan("to")
=> ["to"]
irb(main):773:0> a.scan("t")
=> ["t", "t", "t", "t"]
irb(main):774:0> a.scan(/\w/)
=> ["w", "e", "l", "c", "o", "m", "e", "t", "o", "t", "h", "e", "c", "o", "n", "s", "t", "r", "u", "c", "t", "i", "v", "e", "w", "o", "r", "l", "d", "o", "f", "r", "u", "b", "y"]                                                                                                                                                          
irb(main):775:0> a.scan(/\w+/)
=> ["welcome", "to", "the", "constructive", "world", "of", "ruby"]

split

irb(main):815:0> "1, 2.34,56, 7".split(%r{,\s})
=> ["1", "2.34,56", "7"]
irb(main):816:0> "1, 2.34,56, 7".split(%r{,\s*})
=> ["1", "2.34", "56", "7"]
irb(main):817:0> "1, 2.34,56, 7".split(%r{,\s*},5)
=> ["1", "2.34", "56", "7"]
irb(main):818:0> "1, 2.34,56, 7".split(%r{,\s*},6)
=> ["1", "2.34", "56", "7"]
irb(main):819:0> "1, 2.34,56, 7".split(%r{,\s*},-1)
=> ["1", "2.34", "56", "7"]
irb(main):820:0> "1, 2.34,56, 7".split(%r{,\s*},1)
=> ["1, 2.34,56, 7"]
irb(main):821:0> "1, 2.34,56, 7".split(%r{,\s*},0)
=> ["1", "2.34", "56", "7"]
irb(main):822:0> "1, 2.34,56, 7".split(%r{\s})
=> ["1,", "2.34,56,", "7"]

irb(main):807:0> a.split(" ")
=> ["welcome", "to", "the", "constructive", "world", "of", "ruby"]
irb(main):808:0> a.split(/[aeiou]/)
=> ["w", "lc", "m", " t", " th", " c", "nstr", "ct", "v", " w", "rld ", "f r", "by"]

squeeze 
irb(main):829:0> "yellow moon".squeeze
=> "yelow mon"
irb(main):830:0> "now\s the holly sskdkk monn".squeeze("")
=> "now  the holly sskdkk monn"
irb(main):831:0> "now\s the holly sskdkk monn".squeeze(" ")
=> "now the holly sskdkk monn"
irb(main):832:0> "now\s the hol    ly   sskdkk   monn".squeeze(" ")
=> "now the hol ly sskdkk monn"
irb(main):833:0> "now\s the hol    ly   sskdkk   monn".squeeze("")
=> "now  the hol    ly   sskdkk   monn"
irb(main):834:0> "putters shoot balls".squeeze("m-z")
=> "puters shot balls"

sub only replaces the first occurance of matched pattern

irb(main):837:0> "hello".sub(/([aeiou])/,'<\1>')
=> "h<e>llo"
irb(main):838:0> "hello".sub(/([aeiou])/,'*')
=> "h*llo"


