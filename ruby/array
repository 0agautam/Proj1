								Arrays
1. Creating Arrays
irb(main):040:0> ary = [1,"23",23,'23',23.332,true,'2']
=> [1, "23", 23, "23", 23.332, true, "2"]

irb(main):048:0> ary = Array.new
=> []
irb(main):049:0> ary
=> []
irb(main):050:0> ary.class
=> Array
irb(main):051:0> ary = Array.new(5)
=> [nil, nil, nil, nil, nil]
irb(main):052:0> ary
=> [nil, nil, nil, nil, nil]
irb(main):053:0> ary = Array.new(4,23)
=> [23, 23, 23, 23]

2. Creating Array objects referencing to different object

irb(main):057:0> ary = Array.new(3) {Hash.new}
=> [{}, {}, {}]
irb(main):058:0> ary[0].class
=> Hash
irb(main):059:0> ary = Array.new(3) {|i| i.to_s }
=> ["0", "1", "2"]

irb(main):062:0> ary = Array.new(3) {|i| i}
=> [0, 1, 2]
irb(main):063:0> ary[0].class
=> Integer
irb(main):064:0> ary = Array.new(3) {|i| i.to_s }
=> ["0", "1", "2"]
irb(main):065:0> ary[0].class
=> String

3. Creating multidimentional array
irb(main):066:0> ary_table = Array.new(3) {Array.new(3) {|i| i}}
=> [[0, 1, 2], [0, 1, 2], [0, 1, 2]]

4. Creating Array using kernal module Array Function
irb(main):070:0> ary = Array({:a => 1, :b=>"string", :c=>true})
=> [[:a, 1], [:b, "string"], [:c, true]]
irb(main):071:0> ary.class
=> Array
irb(main):072:0> ary[0].class
=> Array
irb(main):073:0> ary[0][0].class
=> Symbol
irb(main):074:0> ary[0]
=> [:a, 1]
irb(main):075:0> ary[0][0]
=> :a

5. Accessing Array Elements :>
irb(main):098:0> ary = Array([2,3,2,9,1,023,0322,282])
=> [2, 3, 2, 9, 1, 19, 210, 282]
irb(main):099:0> ary
=> [2, 3, 2, 9, 1, 19, 210, 282]
irb(main):100:0> ary[1]
=> 3
irb(main):101:0> ary[0,2]
=> [2, 3]
irb(main):102:0> ary[0,4]
=> [2, 3, 2, 9]
irb(main):103:0> ary[0,-1]
=> nil
irb(main):104:0> ary[-1]
=> 282
irb(main):105:0> ary[4,-1]
=> nil
irb(main):106:0> ary[-1,3]
=> [282]
irb(main):107:0> ary[-2,3]
=> [210, 282]
irb(main):108:0> ary[-3,2]
=> [19, 210]
irb(main):109:0> ary[1..-3]
=> [3, 2, 9, 1, 19]
irb(main):110:0> ary[1..3]
=> [3, 2, 9]
irb(main):111:0> 

At method 
irb(main):111:0> ary.at(1)
=> 3
irb(main):112:0> ary.at(-3)
=> 19
irb(main):113:0> 

Slice method same as #[]
irb(main):114:0> ary.slice(0)
=> 2
irb(main):115:0> ary.slice(0,4)
=> [2, 3, 2, 9]
irb(main):116:0> ary.slice(0..4)
=> [2, 3, 2, 9, 1]

Fetch for out of bound errors warning 
irb(main):124:0> ary.fetch(9,"OOPS!!! OUT OF BOUND")
=> "OOPS!!! OUT OF BOUND"
irb(main):125:0> ary.fetch(7,"OOPS!!! OUT OF BOUND")
=> 282

First and last element of array
irb(main):127:0> ary.first
=> 2
irb(main):128:0> ary.last
=> 282
irb(main):129:0>

Take and drop for returning and droping first n elements
irb(main):129:0> ary.take(3)
=> [2, 3, 2]
irb(main):131:0> ary.drop(3)
=> [9, 1, 19, 210, 282]

6.Obtaining info about Array

Getting the length of array
irb(main):133:0> ary.length
=> 8
irb(main):134:0> ary.size
=> 8
irb(main):135:0> ary.count
=> 8

querying the array
irb(main):139:0> ary.empty?
=> false
irb(main):140:0> ary.include?(22)
=> false
irb(main):141:0> ary.include?(210)
=> true

7. Adding items to array

Using push and <<(apend operator)
irb(main):144:0> ary.push("string")
=> [2, 3, 2, 9, 1, 19, 210, 282, "string"]
irb(main):145:0> ary << "two"
=> [2, 3, 2, 9, 1, 19, 210, 282, "string", "two"]

unshift(at beginning insertion) and insert 
irb(main):151:0> ary.unshift(0)
=> [0, 2, 3, 2, 9, 1, 19, 210, 282, "string", "two"]
irb(main):152:0> ary.insert(8,"let's")
=> [0, 2, 3, 2, 9, 1, 19, 210, "let's", 282, "string", "two"]
irb(main):153:0> ary.length
=> 12
irb(main):154:0> ary.insert(10,"one","three")
=> [0, 2, 3, 2, 9, 1, 19, 210, "let's", 282, "one", "three", "string", "two"]

8. Removing items from array

irb(main):159:0> ary.pop
=> "two"
irb(main):160:0> ary
=> [1, -1, 0, 2, 3, 2, 9, 1, 19, 210, "let's", 282, "one", "three", "string"]

irb(main):161:0> ary.shift
=> 1
irb(main):162:0> ary
=> [-1, 0, 2, 3, 2, 9, 1, 19, 210, "let's", 282, "one", "three", "string"]

irb(main):163:0> ary.delete
ary.delete
ary.delete_at
ary.delete_if

irb(main):163:0> ary.delete_at(10)
=> 282
irb(main):164:0> ary
=> [-1, 0, 2, 3, 2, 9, 1, 19, 210, "let's", "one", "three", "string"]

irb(main):165:0> ary.delete(2)
=> 2
irb(main):166:0> ary
=> [-1, 0, 3, 9, 1, 19, 210, "let's", "one", "three", "string"]

irb(main):173:0> ary.compact
=> [-1, 0, 3, 9, 1, 19, 210, "let's", "one", "three", "string"]
irb(main):174:0> ary
=> [-1, 0, 3, nil, 9, 1, 19, 210, "let's", "one", nil, "three", "string"]
irb(main):175:0> ary.compact
ary.compact
ary.compact!
irb(main):175:0> ary.compact!
=> [-1, 0, 3, 9, 1, 19, 210, "let's", "one", "three", "string"]
irb(main):176:0> ary
=> [-1, 0, 3, 9, 1, 19, 210, "let's", "one", "three", "string"]

Removing duplicate items from array

=> [2, -1, 0, 2, 3, 9, 1, 19, 210, "let's", "one", "three", "string", 2, 2]
irb(main):182:0> ary.uniq
=> [2, -1, 0, 3, 9, 1, 19, 210, "let's", "one", "three", "string"]
irb(main):183:0> ary
=> [2, -1, 0, 2, 3, 9, 1, 19, 210, "let's", "one", "three", "string", 2, 2]
irb(main):184:0> ary.uniq!
=> [2, -1, 0, 3, 9, 1, 19, 210, "let's", "one", "three", "string"]
irb(main):185:0> ary
=> [2, -1, 0, 3, 9, 1, 19, 210, "let's", "one", "three", "string"]

9. Iterating over Arrays 
Using each, reverse_each and map(gives a new array)
irb(main):194:0> ary[0..7].each {|i| print i -=5," "}
-3 -6 -5 -2 4 -4 14 205 => [2, -1, 0, 3, 9, 1, 19, 210]

irb(main):209:0> a.reverse_each {|words| str += "#{words} "}
=> ["ab", "12", "sdf", ";", "df", "lkdf"]
irb(main):210:0> str
=> "lkdf df ; sdf 12 ab "

map
irb(main):217:0> arr
=> [1, 2, 3, 4, 5, 6]
irb(main):218:0> newarr = arr.map {|a| a-10}
=> [-9, -8, -7, -6, -5, -4]
irb(main):219:0> newarr
=> [-9, -8, -7, -6, -5, -4]
irb(main):220:0> arr
=> [1, 2, 3, 4, 5, 6]
irb(main):221:0> arr.map!{|a| a-10}
=> [-9, -8, -7, -6, -5, -4]
irb(main):222:0> arr
=> [-9, -8, -7, -6, -5, -4]
irb(main):223:0> newarr
=> [-9, -8, -7, -6, -5, -4]

10. Selecting Items from Array

Non-destructive selection
irb(main):225:0> arr.select{|i| i < -7}
=> [-9, -8]
irb(main):226:0> arr.reject{|i| i < -7}
=> [-7, -6, -5, -4]
irb(main):227:0> arr.drop_while {|i| i < -7}
=> [-7, -6, -5, -4]

irb(main):229:0> arr
=> [-9, -8, -7, -6, -5, -4]

Destructive selection
irb(main):233:0> arr
=> [-9, -8, -7, -6, -5, -4]

irb(main):234:0> arr.select! {|i| i < -7}
=> [-9, -8]
irb(main):235:0> arr
=> [-9, -8]
irb(main):236:0> arr.push(3,2,0,-1,23)
=> [-9, -8, 3, 2, 0, -1, 23]

irb(main):237:0> arr.reject! {|i| i > 0}
=> [-9, -8, 0, -1]
irb(main):238:0> arr
=> [-9, -8, 0, -1]

irb(main):239:0> arr.delete_if {|i| i> -1}
=> [-9, -8, -1]
irb(main):240:0> arr.keep_if {|i| i < -1 }
=> [-9, -8]
irb(main):241:0> arr
=> [-9, -8]

11. Creation methods

irb(main):002:0> arr = Array.[](1,234.2342,234,33,90,9)
=> [1, 234.2342, 234, 33, 90, 9]
irb(main):003:0> arr = Array[1,939,302,393]
=> [1, 939, 302, 393]
irb(main):004:0> arr = [9,302,202,845]
=> [9, 302, 202, 845]

irb(main):006:0> arr = Array.new(3,"one")
=> ["one", "one", "one"]
irb(main):007:0> arr[0].equal? arr[1]
=> true
irb(main):008:0> arr1 = ['a','b']
=> ["a", "b"]

irb(main):011:0> arr2 = Array.new(arr1)
=> ["a", "b"]
irb(main):012:0> arr1.equal? arr2
=> false
irb(main):013:0> arr = Array.new(5){|i| i*2 }
=> [0, 2, 4, 6, 8]

12. Common gotchas

irb(main):014:0> arr = Array.new(2, Hash.new)
=> [{}, {}]

Use this instead for multi objects in array
irb(main):028:0> arr = Array.new(2) {Hash.new}
=> [{}, {}]
irb(main):029:0> arr[0]['cat']='Billie'
=> "Billie"
irb(main):030:0> arr
=> [{"cat"=>"Billie"}, {}]
irb(main):031:0> arr[1]['cat']='Ellish'
=> "Ellish"
irb(main):032:0> arr
=> [{"cat"=>"Billie"}, {"cat"=>"Ellish"}]
irb(main):033:0> arr.push("cat"=>'Nbilly')
=> [{"cat"=>"Billie"}, {"cat"=>"Ellish"}, {"cat"=>"Nbilly"}]

Using &, set intersection
irb(main):051:0> arr1 = Array.[](1,2,393,233,33,3,92)
=> [1, 2, 393, 233, 33, 3, 92]
irb(main):052:0> arr
=> [1, 2, 33, 4, 2, 3]
irb(main):053:0> arr1
=> [1, 2, 393, 233, 33, 3, 92]
irb(main):054:0> arr & arr1
=> [1, 2, 33, 3]

Repetition,Multiplying with a string and an integer 

irb(main):055:0> arr
=> [1, 2, 33, 4, 2, 3]
irb(main):056:0> arr * 2
=> [1, 2, 33, 4, 2, 3, 1, 2, 33, 4, 2, 3]
irb(main):057:0> arr
=> [1, 2, 33, 4, 2, 3]
irb(main):058:0> arr *=2
=> [1, 2, 33, 4, 2, 3, 1, 2, 33, 4, 2, 3]
irb(main):059:0> arr
=> [1, 2, 33, 4, 2, 3, 1, 2, 33, 4, 2, 3]
irb(main):060:0> arr *="str"
=> "1str2str33str4str2str3str1str2str33str4str2str3"
irb(main):061:0> arr
=> "1str2str33str4str2str3str1str2str33str4str2str3"

try_convert()
irb(main):043:0> a = Array.try_convert(1)
=> nil
irb(main):044:0> a
=> nil
irb(main):045:0> a = Array.try_convert("a")
=> nil
irb(main):046:0> a = Array.try_convert(["a"])
=> ["a"]
irb(main):047:0> a
=> ["a"]

Array Difference
irb(main):074:0> arr1.push("a","b","c","d")
=> [1, 2, 393, 233, 33, 3, 92, "a", "b", "c", "d"]
irb(main):075:0> arr2.push(1,2,4,55)
=> ["a", "b", 1, 2, 4, 55]
irb(main):076:0> diff = arr1 - arr2
=> [393, 233, 33, 3, 92, "c", "d"]
irb(main):077:0> diff = arr2 - arr1
=> [4, 55]

13. Functions

assoc(obj)=el_ary or nil : searches for first element of array contanined in an array with the obj
irb(main):112:0> s1 = ["colors","red","green","blue"]
=> ["colors", "red", "green", "blue"]
irb(main):113:0> s2 = ["letters","a","b","c"]
=> ["letters", "a", "b", "c"]
irb(main):114:0> s3 = "foo"
=> "foo"
irb(main):115:0> a=[s1,s2,s3]
=> [["colors", "red", "green", "blue"], ["letters", "a", "b", "c"], "foo"]
irb(main):116:0> a
=> [["colors", "red", "green", "blue"], ["letters", "a", "b", "c"], "foo"]
irb(main):117:0> a.assoc("colors")
=> ["colors", "red", "green", "blue"]
irb(main):118:0> a.assoc("letters")
=> ["letters", "a", "b", "c"]
irb(main):119:0> a.assoc("foo")
=> nil

bsearch {|x| block}
issue

collect and map 
irb(main):201:0> arr2 = %w[a b c d]
=> ["a", "b", "c", "d"]
irb(main):202:0> arr2.map! {|x| x+"xyz"}
=> ["axyz", "bxyz", "cxyz", "dxyz"]
irb(main):203:0> arr2.collect.with_index {|x,i| x[1]}
=> ["x", "x", "x", "x"]
irb(main):204:0> arr2.collect.with_index {|x,i| x[0]}
=> ["a", "b", "c", "d"]
irb(main):205:0> arr2.collect.with_index {|x,i| x[0..1]}
=> ["ax", "bx", "cx", "dx"]
irb(main):206:0> arr2.collect.with_index {|x,i| x[0...1]}
=> ["a", "b", "c", "d"]
irb(main):207:0> arr2.collect.with_index {|x,i| x[0...2]}
=> ["ax", "bx", "cx", "dx"]
irb(main):208:0> arr2.collect.with_index {|x,i| x[0...i]}
=> ["", "b", "cx", "dxy"]
irb(main):209:0> arr2.map.with_index {|x,i| x[0...i]}
=> ["", "b", "cx", "dxy"]

combination(n){|c| block}
returns the combination of elements of array and return the array itself

irb(main):219:0> a.combination(3).to_a
=> [[0, 1, 4], [0, 1, 5], [0, 1, 8], [0, 1, 9], [0, 1, 23], [0, 1, 25], [0, 4, 5], [0, 4, 8], [0, 4, 9], [0, 4, 23], [0, 4, 25], [0, 5, 8], [0, 5, 9], [0, 5, 23], [0, 5, 25], [0, 8, 9], [0, 8, 23], [0, 8, 25], [0, 9, 23], [0, 9, 25], [0, 23, 25], [1, 4, 5], [1, 4, 8], [1, 4, 9], [1, 4, 23], [1, 4, 25], [1, 5, 8], [1, 5, 9], [1, 5, 23], [1, 5, 25], [1, 8, 9], [1, 8, 23], [1, 8, 25], [1, 9, 23], [1, 9, 25], [1, 23, 25], [4, 5, 8], [4, 5, 9], [4, 5, 23], [4, 5, 25], [4, 8, 9], [4, 8, 23], [4, 8, 25], [4, 9, 23], [4, 9, 25], [4, 23, 25], [5, 8, 9], [5, 8, 23], [5, 8, 25], [5, 9, 23], [5, 9, 25], [5, 23, 25], [8, 9, 23], [8, 9, 25], [8, 23, 25], [9, 23, 25]]   
irb(main):220:0> a.combination(10).to_a
=> []
irb(main):221:0> a.combination(5).to_a
=> [[0, 1, 4, 5, 8], [0, 1, 4, 5, 9], [0, 1, 4, 5, 23], [0, 1, 4, 5, 25], [0, 1, 4, 8, 9], [0, 1, 4, 8, 23], [0, 1, 4, 8, 25], [0, 1, 4, 9, 23], [0, 1, 4, 9, 25], [0, 1, 4, 23, 25], [0, 1, 5, 8, 9], [0, 1, 5, 8, 23], [0, 1, 5, 8, 25], [0, 1, 5, 9, 23], [0, 1, 5, 9, 25], [0, 1, 5, 23, 25], [0, 1, 8, 9, 23], [0, 1, 8, 9, 25], [0, 1, 8, 23, 25], [0, 1, 9, 23, 25], [0, 4, 5, 8, 9], [0, 4, 5, 8, 23], [0, 4, 5, 8, 25], [0, 4, 5, 9, 23], [0, 4, 5, 9, 25], [0, 4, 5, 23, 25], [0, 4, 8, 9, 23], [0, 4, 8, 9, 25], [0, 4, 8, 23, 25], [0, 4, 9, 23, 25], [0, 5, 8, 9, 23], [0, 5, 8, 9, 25], [0, 5, 8, 23, 25], [0, 5, 9, 23, 25], [0, 8, 9, 23, 25], [1, 4, 5, 8, 9], [1, 4, 5, 8, 23], [1, 4, 5, 8, 25], [1, 4, 5, 9, 23], [1, 4, 5, 9, 25], [1, 4, 5, 23, 25], [1, 4, 8, 9, 23], [1, 4, 8, 9, 25], [1, 4, 8, 23, 25], [1, 4, 9, 23, 25], [1, 5, 8, 9, 23], [1, 5, 8, 9, 25], [1, 5, 8, 23, 25], [1, 5, 9, 23, 25], [1, 8, 9, 23, 25], [4, 5, 8, 9, 23], [4, 5, 8, 9, 25], [4, 5, 8, 23, 25], [4, 5, 9, 23, 25], [4, 8, 9, 23, 25], [5, 8, 9, 23, 25]]

count, concat, compact

cycle(n) : repeat a block n times and if n not given repeat it infinite times
irb(main):001:0> a = [1,3,4]
=> [1, 3, 4]
irb(main):002:0> a.cycle(2) {|x| p x}
1
3
4
1
3
4
=> nil

delete(object){block} obj or nil or block statement
irb(main):003:0> a
=> [1, 3, 4]
irb(main):004:0> a.delete(3)
=> 3
irb(main):005:0> a.delete(5)
=> nil
irb(main):006:0> a
=> [1, 4]
irb(main):007:0> a.delete(6) {"Not found!!!"}
=> "Not found!!!"

difference
irb(main):011:0> a = [1,23,39,494]
=> [1, 23, 39, 494]
irb(main):012:0> b = [93,393,2,2,3,494]
=> [93, 393, 2, 2, 3, 494]
irb(main):013:0> a.difference(b)
=> [1, 23, 39]
irb(main):014:0> a
=> [1, 23, 39, 494]
irb(main):015:0> b.difference(a)
=> [93, 393, 2, 2, 3]

dig for nested indexes
irb(main):019:0> a = [[1, [2,3]]]
=> [[1, [2, 3]]]
irb(main):020:0> a.dig(0,1,0)
=> 2
irb(main):021:0> [1,{foo: :bar}].dig(1,:foo)
=> :bar
irb(main):022:0> 

each, each_index, empty?,eql?
fill 

filter is a alias for select
irb(main):028:0> a = [2,3,5,1,2,4,6,8]
=> [2, 3, 5, 1, 2, 4, 6, 8]
irb(main):029:0> a.filter {|x| x.even}
x.even?
x.event
x.event=
irb(main):029:0> a.filter {|x| x.even?}
=> [2, 2, 4, 6, 8]
irb(main):030:0> a
=> [2, 3, 5, 1, 2, 4, 6, 8]
irb(main):031:0> b = a.filter {|x| x.even?}
=> [2, 2, 4, 6, 8]
irb(main):032:0> b
=> [2, 2, 4, 6, 8]
irb(main):033:0> str = %w[a b c d e f g h i j]
=> ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]
irb(main):034:0> str.select {|v| v=~/[aeiou]/}
=> ["a", "e", "i"]

sort , shuffle

irb(main):055:0> a
=> [2, 3, 5, 1, 2, 4, 6, 8]
irb(main):056:0> a.sort
=> [1, 2, 2, 3, 4, 5, 6, 8]
irb(main):057:0> a.sort.reverse
=> [8, 6, 5, 4, 3, 2, 2, 1]
irb(main):058:0> a.sort {|a,b| a<=>b}
=> [1, 2, 2, 3, 4, 5, 6, 8]
irb(main):059:0> a
=> [2, 3, 5, 1, 2, 4, 6, 8]
irb(main):060:0> a.shuffle
=> [6, 8, 2, 1, 3, 5, 2, 4]
irb(main):061:0> a.shuffle(random: Random.new(1))
=> [8, 5, 3, 6, 2, 2, 1, 4]
irb(main):062:0> a.shuffle(random: Random.new(10))
=> [5, 1, 6, 8, 2, 2, 4, 3]
irb(main):063:0> a.shuffle(random: Random.new(100))
=> [3, 2, 4, 5, 6, 1, 8, 2]
irb(main):064:0> 

